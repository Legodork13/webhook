from flask import Flask, request, jsonify
import os
import requests

app = Flask(__name__)

TOKENVIEW_API_KEY = os.getenv('TOKENVIEW_API_KEY')
VERCEL_URL = os.getenv('VERCEL_URL')

@app.route('/api/webhook', methods=['GET', 'POST'])
def handle_webhook():
    if request.method == 'GET':
        # Tokenview –ø—Ä–æ–≤–µ—Ä—è–µ—Ç URL - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        return jsonify({"status": "OK", "message": "Webhook is ready"}), 200
    
    elif request.method == 'POST':
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
            signature = request.headers.get('X-Tokenview-Signature')
            if not signature or signature != TOKENVIEW_API_KEY:
                return jsonify({"error": "Invalid signature"}), 401

            data = request.json
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
            event_handlers = {
                'transaction': handle_transaction,
                'token_create': handle_token_create,
                'whale_alert': handle_whale_alert,
                'web3_event': handle_web3_event
            }
            
            handler = event_handlers.get(data.get('type'))
            if handler:
                return handler(data)
            return jsonify({"error": "Unknown event type"}), 400

        except Exception as e:
            print(f"Error processing webhook: {str(e)}")
            return jsonify({"error": "Internal server error"}), 500

    else:
        return jsonify({"error": "Method not allowed"}), 405

def handle_transaction(data):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    message = (
        f"üîî –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (ETH):\n\n"
        f"üìù –•–µ—à: {data.get('hash', 'N/A')}\n"
        f"üì¶ –ë–ª–æ–∫: {data.get('block_number', 'N/A')}\n"
        f"üì§ –û—Ç: {data.get('from', 'N/A')}\n"
        f"üì• –ö–æ–º—É: {data.get('to', 'N/A')}\n"
        f"üí∞ –°—É–º–º–∞: {data.get('value', '0')} ETH\n"
        f"‚è± –í—Ä–µ–º—è: {data.get('timestamp', 'N/A')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram —á–µ—Ä–µ–∑ –Ω–∞—à –±–æ—Ç
    bot_response = requests.post(
        f"{VERCEL_URL}/api/bot",
        json={
            "type": "transaction",
            "message": message,
            "original_data": data
        }
    )
    
    if bot_response.status_code == 200:
        return jsonify({"status": "Transaction processed"}), 200
    return jsonify({"error": "Failed to send to Telegram"}), 500

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ handle_token_create, handle_whale_alert, handle_web3_event –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == '__main__':
    app.run()